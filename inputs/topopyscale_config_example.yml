project:
  name: SnowMaL
  description: Generating time series of snow depth using input DEMs and machine learning
  authors:
    - Rainey Aberle
    - Ellyn Enderlin
  date: 2024-07-23
  directory: /Volumes/LaCie/raineyaberle/Research/PhD/SnowMaL/study-sites/MCS

  # start and end date of the timeperiod of interest
  start: 2024-03-01
  end: 2024-03-15
  split:
    IO: False       # Flag to split downscaling in time or not
    time: 1         # number of years to split timeline in

  # This is for the option of fetching DEM with API (NOT YET SUPPORTED)
  extent:

  # Indicate the number of core to use
  CPU_cores: 4

  # indicate which climate data to use. Currently only era5 available (see climate section below)
  climate: era5

#.....................................................................................................
climate:
  # For now TopoPyScale only supports ERA5-reanalysis input climate data
  era5:
    path: ERA5   # Can either be a absolute path or relative to the project directory
    product: reanalysis
    timestep: 1D

    # Choose pressure levels relevant to your project and available in ERA5 Pressure Levels
    plevels: [1]
    download_threads: 12    # Number of threads to request downloads with cdsapi
    realtime: False    # (Optional) Forces redownload of latest month of ERA5 data upon each run of code (allows daily updates for realtime applications)
  precip_lapse_rate: True     # Apply precipitation lapse-rate correction (currently valid for Northern Hemisphere only)

#.....................................................................................................
dem:
  path: /Volumes/LaCie/raineyaberle/Research/PhD/SkySat-Stereo/study-sites/MCS/refdem/                       # (optional) Absolute path where the DEM file is stored
  file: MCS_REFDEM_WGS84_5m.tif                         # Name of the dem file. Must be a raster.
  epsg: 32611                             # projection EPSG code
  horizon_increments: 10                  # horizon increment angle in degrees
  solar_position_method: nrel_numpy       # (optional) method to compute solar_geom with pvlib libraries.

#.....................................................................................................
sampling:

  # choose downscaling using dem segmentation 'toposub' or a list of points 'points'. Possible values: toposub, points
  method: toposub

  # In case method == 'points', indicate a file with a list of points and the point coordinate projection EPSG code
  # points:
  #   csv_file: pt_list.csv               # filename of list of points
  #   epsg: 4326                          # EPSG code of the points (x,y) coordinates in file
  #   name_column: pt_name                # (optional) column containing point_name. If not provided, point_name will be automatically assigned

  # In case method == 'toposub'
  toposub:
    clustering_method: kmean   # clustering method available: kmean, minibatchkmean
    n_clusters: 50                      # number of cluster to segment the DEM
    random_seed: 2                      # random seed for the K-mean clustering
    clustering_features: { 'x': 1, 'y': 1, 'elevation': 4, 'slope': 1, 'aspect_cos': 1, 'aspect_sin': 1, 'svf': 1 }  # dictionnary of the features of choice to use in clustering with their relative importance. Relative importance is a multiplier after scaling
    # clustering_mask: clustering/catchment_mask.tif # optional path to tif containing a mask (0/1)
    # clustering_groups: clustering/VEG_CODE.tif # optional path to a tif containing cluster groups (int values), e.g. land cover

#.....................................................................................................
toposcale:
  interpolation_method: idw               # interpolation methods available: linear or idw
  LW_terrain_contribution: True           # (bool)    Turn ON/OFF terrain contribution to longwave

#.....................................................................................................
outputs:
  directory: /Volumes/LaCie/raineyaberle/Research/PhD/SnowMaL/study-sites/MCS/ERA5/           # (optional) absolute path where to store the final downscaled products.
  variables: all                          # list of variables to export in netcdf. ['t','p','SW']. Default None or all
  file:
    clean_outputs: False                # (bool)    delete the entire outputs/ directory prior to downscaling
    clean_FSM: True                     # (bool)    delete the entire sim/ directory
    df_centroids: df_centroids.pck      # (pickle)  dataframe containing the points of interest with their topographic features
    ds_param: ds_param.nc               # (netcdf)  topographic parameters (slope, aspect, etc.)
    ds_solar: ds_solar.nc               # (netcdf)  solar geometry
    da_horizon: da_horizon.nc           # (netcdf)  horizon angles
    landform: landform.tif              # (geotiff) rasters of of cluster labels, [TopoSub]
    downscaled_pt: down_pt_*.nc         # (netcdf)  Downscales

clean_up:
  delete_tmp_dirs: True                   # (optional: bool) delete the created tmp directories after downscaling?
